name: ' CI/CD'

on:
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: Environment
      full:
        type: boolean
        description: Deploy ALL environments
      cloud:
        type: boolean
        description: Cloud runner (default false)
  workflow_run:
    workflows: ["Pull Request Handler"]
    types:
      - completed
  release:
    types:
      - created
  push:
    paths-ignore:
      - '**.md'
      - '.github/workflows/*.yaml'
      - '.github/workflows/CICD.yaml'
    branches: [ 'develop']
  pull_request:
    branches: [ "develop" ]
    types:
      - closed
    paths-ignore:
      - '**/*.md'
      - '**/*.yaml'

defaults:
  run:
    shell: powershell

run-name: ${{ fromJson(format('["","Check pull request from {1}/{2}{0} {3}"]',':',github.event.workflow_run.head_repository.owner.login,github.event.workflow_run.head_branch,github.event.workflow_run.display_title))[github.event_name == 'workflow_run'] }}

permissions:
  contents: read
  actions: read
  pull-requests: write
  checks: write
  issues: write

env:
  workflowDepth: 1
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}
  RunTests: false

jobs:
  
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      settings: ${{ steps.ReadSettings.outputs.SettingsJson }}
      environments: ${{ steps.ReadSettings.outputs.EnvironmentsJson }}
      environmentCount: ${{ steps.ReadSettings.outputs.EnvironmentCount }}
      deliveryTargets: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetsJson }}
      deliveryTargetCount: ${{ steps.DetermineDeliveryTargets.outputs.DeliveryTargetCount }}
      githubRunner: ${{ steps.ReadSettings.outputs.GitHubRunnerJson }}
      githubRunnerShell: ${{ steps.ReadSettings.outputs.GitHubRunnerShell }}
      checkRunId: ${{ steps.CreateCheckRun.outputs.checkRunId }}
      projects: ${{ steps.determineProjectsToBuild.outputs.ProjectsJson }}
      projectDependenciesJson: ${{ steps.determineProjectsToBuild.outputs.ProjectDependenciesJson }}
      buildOrderJson: ${{ steps.determineProjectsToBuild.outputs.BuildOrderJson }}
      hotfix: ${{ steps.check_label.outputs.label }}
      stoprun: ${{ steps.check_stop.outputs.stop_run }}
    steps:


      - name: Checkout release branch
        uses: actions/checkout@v3
        with:
          lfs: true
          ref: develop
      

          
      - name: Determine Projects To Build
        id: determineProjectsToBuild
        uses: microsoft/AL-Go-Actions/DetermineProjectsToBuild@v3.1
        with:
          shell: powershell
          maxBuildDepth: ${{ env.workflowDepth }}

      - name: Determine Delivery Target Secrets
        id: DetermineDeliveryTargetSecrets
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $deliveryTargetSecrets = @('GitHubPackagesContext','NuGetContext','StorageContext','AppSourceContext')
          $namePrefix = 'DeliverTo'
          Get-Item -Path (Join-Path $ENV:GITHUB_WORKSPACE ".github/$($namePrefix)*.ps1") | ForEach-Object {
            $deliveryTarget = [System.IO.Path]::GetFileNameWithoutExtension($_.Name.SubString($namePrefix.Length))
            $deliveryTargetSecrets += @("$($deliveryTarget)Context")
          }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "Secrets=$($deliveryTargetSecrets -join ',')"

      - name: Read secrets
        uses: microsoft/AL-Go-Actions/ReadSecrets@v3.1
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          shell: powershell
          settingsJson: ${{ env.Settings }}
          secrets: ${{ steps.DetermineDeliveryTargetSecrets.outputs.Secrets }}

      - name: Determine Delivery Targets
        id: DetermineDeliveryTargets
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $deliveryTargets = @('GitHubPackages','NuGet','Storage')
          if ($env:type -eq "AppSource App") {
            $continuousDelivery = $false
            # For multi-project repositories, we will add deliveryTarget AppSource if any project has AppSourceContinuousDelivery set to true
            ('${{ steps.determineProjectsToBuild.outputs.ProjectsJson }}' | ConvertFrom-Json) | where-Object { $_ } | ForEach-Object {
              $projectSettings = Get-Content (Join-Path $_ '.AL-Go/settings.json') -raw | ConvertFrom-Json
              if ($projectSettings.PSObject.Properties.Name -eq 'AppSourceContinuousDelivery' -and $projectSettings.AppSourceContinuousDelivery) {
                Write-Host "Project $_ is setup for Continuous Delivery"
                $continuousDelivery = $true
              }
            }
            if ($continuousDelivery) {
              $deliveryTargets += @("AppSource")
            }
          }
          $namePrefix = 'DeliverTo'
          Get-Item -Path (Join-Path $ENV:GITHUB_WORKSPACE ".github/$($namePrefix)*.ps1") | ForEach-Object {
            $deliveryTarget = [System.IO.Path]::GetFileNameWithoutExtension($_.Name.SubString($namePrefix.Length))
            $deliveryTargets += @($deliveryTarget)
          }
          $deliveryTargets = @($deliveryTargets | Select-Object -unique | Where-Object {
            $include = $false
            Write-Host "Check DeliveryTarget $_"
            $contextName = "$($_)Context"
            $deliveryContext = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable($contextName)))
            if ($deliveryContext) {
              $settingName = "DeliverTo$_"
              $settings = $env:Settings | ConvertFrom-Json
              if (($settings.PSObject.Properties.Name -eq $settingName) -and ($settings."$settingName".PSObject.Properties.Name -eq "Branches")) {
                Write-Host "Branches:"
                $settings."$settingName".Branches | ForEach-Object {
                  Write-Host "- $_"
                  if ($ENV:GITHUB_REF_NAME -like $_) {
                    $include = $true
                  }
                }
              }
              else {
                $include = ($ENV:GITHUB_REF_NAME -eq 'main')
              }
            }
            if ($include) {
              Write-Host "DeliveryTarget $_ included"
            }
            $include
          })
          $deliveryTargetsJson = $deliveryTargets | ConvertTo-Json -Depth 99 -compress
          if ($deliveryTargets.Count -lt 2) { $deliveryTargetsJson = "[$($deliveryTargetsJson)]" }
          Add-Content -Path $env:GITHUB_OUTPUT -Value "DeliveryTargetsJson=$deliveryTargetsJson"
          Write-Host "DeliveryTargetsJson=$deliveryTargetsJson"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "DeliveryTargetCount=$($deliveryTargets.Count)"
          Write-Host "DeliveryTargetCount=$($deliveryTargets.Count)"
          Add-Content -Path $env:GITHUB_ENV -Value "DeliveryTargets=$deliveryTargetsJson"
